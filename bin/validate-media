#!/bin/bash
set -e

########################################
## Define Constants

root=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." >/dev/null 2>&1 && pwd)

good="✅"
warn="⚠️ "
fail="❌"

categories=(audio camera docs downloads screenshots private)
datename_categories=(camera screenshots private)

date_zero="00000000-000000"

########################################
## Make sure required bins & files & dirs exist

if [[ -z "$(command -v exiftool)" ]]
then echo "$fail Install exiftool first" && exit 1
fi

if [[ -z "$(command -v sqlite3)" ]]
then echo "$fail Install sqlite3 first" && exit 1
fi

media=${MEDIA_DIR:-$HOME/Media}
mkdir -p "$media"

index="$media/index.sqlite"
if [[ ! -f "$index" ]]
then sqlite3 "$index" "create table media(hash varchar(64) primary key, path text);"
fi

########################################
## Parse Args

path="$1"
fullpath="$media/$path"
if [[ -z "$path" || "$path" == -* ]]
then path=""
elif [[ -n "$path" && ! -f "$fullpath" ]]
then echo "$fail File does not exist at $fullpath" && exit 1
fi

if [[ "$1" == "--fix" || "$2" == "--fix" ]]
then fix="true"
else fix="false"
fi

########################################
## Helper Functions

function getCreateDate {
  function fmtDate {
    sed 's/.*  ://' \
      | sed 's/: /:0/g' \
      | sed 's/://g' \
      | sed 's/\+.*//g' \
      | sed 's/ /-/g' \
      | sed 's/-$//' \
      | sed 's/^-//'
  }
  created=$(exiftool -CreateDate -- "$1" | fmtDate)
  if [[ -n "$created" && "$created" != "$date_zero" ]]
  then echo "$created"
  else
    created=$(exiftool -DateCreated -- "$1" | fmtDate)
    if [[ -n "$created" && "$created" != "$date_zero" ]]
    then echo "$created"
    else echo "$date_zero"
    fi
  fi
}

########################################
## Verify Media

function verifyMedia {

  file="$1"
  hasErr="false"

  ####################
  ## Check Path

  fullpath="$media/$file"
  if [[ ! -f "$fullpath" ]]
  then echo "$fail No file exists at path $fullpath" && return
  fi

  ####################
  ## Check Index

  if ! inputs=$(sqlite3 "$index" "select hash from media where path = '$file';" | sort)
  then echo "$fail Failed to select file paths from $index" && exit 1
  fi
  if [[ -z "$inputs" ]]
  then echo "$fail File at $file is not in the index" && hasErr="true"
  fi

  ####################
  ## Check Category

  category="${file%%/*}"
  if ! grep -w -q "$category" <<<"${categories[*]}"
  then echo "$warn Invalid category for $file" && hasErr="true"
  fi

  ####################
  ## Check Hash

  checksum=$(sha256sum -- "$fullpath" | cut -d " " -f 1)
  noext=${file%.*}
  suffix=${noext##*-}
  if [[ "$checksum" != "$suffix"* ]]
  then echo "$warn Invalid checksum for $file (sha256=$checksum)" && hasErr="true"
  fi

  ####################
  ## Check Create Date

  if grep -w -q "$category" <<<"${datename_categories[*]}"
  then
    created=$(getCreateDate "$fullpath")
    if [[ "${file##*/}" != "$created"* ]]
    then
      echo "$warn Invalid create date for $file (CreateDate=$created)"
      hasErr="true"
      if [[ "$fix" == "true" ]]
      then bash "$root/bin/redate-media" "$file"
      fi
    fi
  fi

  if [[ "$hasErr" == "false" ]]
  then echo "$good Validated $file"
  fi

}

########################################
## Verify Provided File

if [[ -n "$path" ]]
then verifyMedia "$path"
else

  ########################################
  ## Or Verify All Files

  if ! index_paths=$(sqlite3 "$index" "select path from media;" | sort)
  then echo "$fail Failed to select file paths from $index" && exit 1
  fi
  echo "Found $(echo "$index_paths" | wc -l) media files in the index"

  fs_paths=$(
    for category in "${categories[@]}";
    do find "$media/$category" -maxdepth 1 -type f;
    done | sed "s|$media/||"
  )
  echo "Found $(echo "$fs_paths" | wc -l) media files on the filesystem"

  all_paths=$(echo -en "$index_paths\n$fs_paths" | sort | uniq)
  echo "Validating $(echo "$all_paths" | wc -l) unique media files"
  for file in $all_paths
  do verifyMedia "$file"
  done

fi
