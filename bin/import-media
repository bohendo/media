#!/bin/bash
set -e

good="✅"
warn="⚠️ "
fail="❌"

####################
## assert & setup env

if [[ -z "$(command -v exiftool)" ]]
then echo "$fail Install exiftool first" && exit 1
fi

if [[ -z "$(command -v ffmpeg)" ]]
then echo "$fail Install ffmpeg first" && exit 1
fi

media=${MEDIA_DIR:-$HOME/Media}
mkdir -p "$media"

tmp="/tmp/media"
rm -rf "$tmp"
mkdir -p "$tmp"

target="$1"
if [[ ! -f "$target" ]]
then echo "$fail File does not exist at $target" && exit 1
fi

categories=(camera screenshots private)
category="$2"
if [[ -z "$category" ]]
then
  echo "Use the 2nd arg to specify the category of the imported media"
  echo "Valid categories: ${categories[*]}"
  exit 1;
elif ! grep -w -q "$category" <<<"${categories[*]}"
then
  echo "Category $category is invalid"
  echo "Valid categories: ${categories[*]}"
  exit 1;
fi

if [[ "$3" == "-y" || "$3" == "--yes" ]]
then dryrun="false"
elif [[ "$3" == "-n" || "$3" == "--no" ]]
then dryrun="true"
else
  echo "Use the 3rd arg to specify whether or not you actually want to make changes"
  echo "  -n  No I don't want to make changes, show me what the changes would be"
  echo "  -y  Yes I want to make changes"
  exit 1;
fi

if [[ "$4" == "--rm" || "$4" == "--remove" ]]
then remove="true"
else remove="false"
fi

function getCreateDate {
  exiftool -CreateDate "$1" 2> /dev/null \
    | sed 's/.*  ://' \
    | sed 's/: /:0/g' \
    | sed 's/://g' \
    | sed 's/\+.*//g' \
    | sed 's/ /-/g' \
    | sed 's/-$//' \
    | sed 's/^-//'
}

function setCreateDate {
  t="$1"
  d="$2"
  exiftool -CreateDate="${d::4}:${d:4:2}:${d:6:2} ${d:9:2}:${d:11:2}:${d:13:2}" "$t" > /dev/null
  created=$(getCreateDate "$t")
  original="${t}_original"
  if [[ "$original" != "$tmp/$(basename "${t}_original")" ]]
  then mv -f "$original" "$tmp/$(basename "${t}_original")"
  fi
  echo "$good Updated exif data for $t w new create date: ${created}"
}

dotype=${target##*.}
ext=$(exiftool -FileTypeExtension "$target" 2> /dev/null | sed 's/^.*: //')

if [[ \
  "$ext" != "3gp" &&\
  "$ext" != "avi" &&\
  "$ext" != "gif" &&\
  "$ext" != "heic" &&\
  "$ext" != "jpg" &&\
  "$ext" != "m4v" &&\
  "$ext" != "mov" &&\
  "$ext" != "mp4" &&\
  "$ext" != "png" \
  ]]
then echo "$fail Skipping file with unsupported FileTypeExtension $ext: $target" && exit 1
fi

created=$(getCreateDate "$target")
if [[ -z "$created" ]]
then

  if [[ "$target" =~ (IMG|DOC|VID)-[[:digit:]]{8}-WA[[:digit:]]{4,}.* ]]
  then
    setCreateDate "$target" "$(echo "$target" | cut -d "-" -f 2)-000000"
    created=$(getCreateDate "$target")

  # eg 2019-10-26 10.36.10.jpg
  elif [[ "$target" =~ [[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}\ [[:digit:]]{2}\.[[:digit:]]{2}\.[[:digit:]]{2}.* ]]
  then
    setCreateDate "$target" "$(basename "$target" | sed 's/-//g' | sed 's/ /-/g' | sed 's/\.//' | sed 's/\.//' | sed 's/\..*//')"
    created=$(getCreateDate "$target")

  # eg SmartSelect_20200613-210904_Prime Video.jpg
  elif [[ "$target" =~ _[[:digit:]]{8}-[[:digit:]]{6}_*.* ]]
  then
    setCreateDate "$target" "$(basename "$target" | cut -d "_" -f 2)"
    created=$(getCreateDate "$target")

  # eg Screenshot from 2020-08-26 14-03-02.png
  elif [[ "$target" =~ \ [[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}\ [[:digit:]]{2}-[[:digit:]]{2}-[[:digit:]]{2}.* ]]
  then
    setCreateDate "$target" "$(basename "$target" | cut -d " " -f 3-4 | sed 's/\..*//' | sed 's/-//g' | sed 's/ /-/')"
    created=$(getCreateDate "$target")

  else
    setCreateDate "$target" "00000000-000000"
    created="00000000-000000" # TODO: check to see if the filename includes a date?
  fi

fi

########################################
## Conversions: heic=>jpg, avi,m4v,mov=>mp4

# Convert heic files into jpg
if [[ "$ext" == "heic" ]]
then
  if [[ -z "$(command -v heif-convert)" ]]
  then echo "$fail Install heif-convert first" && exit 1
  fi
  tmpTarget="$tmp/$(basename "$target" | sed 's/\.'"$dotype"'/\.jpg/')"
  if [[ -f "$tmpTarget" ]]
  then rm -f "$tmpTarget"
  fi
  echo "$warn Converting heic-formatted $target into an jpg at $tmpTarget"
  heif-convert -q95 "$target" "$tmpTarget" > /dev/null
  target="$tmpTarget"
  ext="jpg"
fi

# Convert video files into mp4
# Do we need to rm data streams? https://github.com/aminyazdanpanah/PHP-FFmpeg-video-streaming/issues/74
if [[ "$ext" == "3gp" || "$ext" == "avi" || "$ext" == "m4a" || "$ext" == "mov" ]]
then
  tmpTarget="$tmp/$(basename "$target" | sed 's/\.'"$dotype"'/\.mp4/')"
  if [[ -f "$tmpTarget" ]]
  then rm -f "$tmpTarget"
  fi
  echo "$warn Converting $ext-formatted $target into an mp4 at $tmpTarget"
  ffmpeg -i "$target" -loglevel error -crf 18 -f mp4 "$tmpTarget"
  setCreateDate "$tmpTarget" "$created"
  target="$tmpTarget"
  ext="mp4"
fi

########################################
## Check digest & import

full_digest=$(sha256sum "$target" | cut -d " " -f 1)
digest=$(echo "$full_digest" | head -c 8)

name="$created-$digest.$ext"

path="$media/$category/$name"
if [[ ! -d "$(dirname "$path")" ]]
then mkdir "$(dirname "$path")"
fi

trash=$media/.trash
if [[ ! -f "$trash" ]]
then touch "$trash"
fi

if grep -qs "$full_digest" < "$trash"
then echo "$warn $name has already been deleted, skipping import" && exit 0
fi

if [[ -f "$path" ]]
then
  dup_digest=$(sha256sum "$path" | cut -d " " -f 1)
  if [[ "$dup_digest" == "$full_digest" ]]
  then echo "$good Destination $path already exists w the same digest as $target"
  else echo "$fail Destination $path already exists w DIFFERENT digest than $target" && exit 1
  fi

  if [[ "$dryrun" == "false" && "$remove" == "true" ]]
  then
    if [[ "$(sha256sum "$target" | cut -d " " -f 1)" == "$(sha256sum "$path" | cut -d " " -f 1)" ]]
    then rm -f "$target" && echo "$warn Removed $target"
    else echo "Copy failure, not removing target" && exit 1
    fi
  fi

  exit
fi

# Check for other files in media w the same digest
if ! dups=$(find "$media/" -type "f" -name "*-$digest.*")
then echo "$fail Failed to search for files with digest of $digest" && exit 1
fi
if [[ -n "$dups" ]]
then
  for dup in $dups
  do
    dup_digest=$(sha256sum "$dup" | cut -d " " -f 1)
    if [[ "$dup_digest" == "$full_digest" ]]
    then echo "$good $dup & target have same digest: $dup_digest"
    else echo "$warn $dups ($dup_digest) & target ($full_digest) have similar digests"
    fi
  done
  exit 1
fi

if [[ "$dryrun" == "true" ]]
then echo "$good Copy $target to $path"
elif [[ "$dryrun" == "false" ]]
then
  cp -i "$target" "$path"
  echo "$good Copied $target to $path"
  chmod 644 "$path"

  if [[ "$remove" == "true" ]]
  then
    if [[ "$(sha256sum "$target" | cut -d " " -f 1)" == "$(sha256sum "$path" | cut -d " " -f 1)" ]]
    then rm -f "$target" && echo "$warn Removed $target"
    else echo "Copy failure, not removing target" && exit 1
    fi
  fi

else
  echo "Use the 2nd arg to specify whether or not you actually want to make changes"
  echo "  -n  No I don't want to make changes, show me what the changes would be"
  echo "  -y  Yes I want to make changes"
  echo "  -p  Yes I want to make changes but keep things private"
fi
