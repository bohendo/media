#!/bin/bash
set -e

good="✅"
warn="⚠️ "
fail="❌"

categories=(audio camera docs screenshots private)
datename_types=(gif jpg mp4 png) # these file types are named yyyymmdd-hhmmss-<hash>.ext

####################
## assert & setup env

if [[ -z "$(command -v exiftool)" ]]
then echo "$fail Install exiftool first" && exit 1
fi

if [[ -z "$(command -v ffmpeg)" ]]
then echo "$fail Install ffmpeg first" && exit 1
fi

if [[ -z "$(command -v sqlite3)" ]]
then echo "$fail Install sqlite3 first" && exit 1
fi

media=${MEDIA_DIR:-$HOME/Media}
mkdir -p "$media"

tmp="/tmp/media"
mkdir -p "$tmp"

####################
## parse args

target="$1"
if [[ ! -f "$target" ]]
then echo "$fail File does not exist at $target" && exit 1
fi

given_category="$2"
if [[ "$given_category" == -* ]]
then given_category=""
elif [[ -n "$given_category" ]] && ! grep -w -q "$given_category" <<<"${categories[*]}"
then
  echo "Category $given_category is invalid"
  echo "Valid categories: ${categories[*]}"
  exit 1;
fi

## Extra flags

if [[ "$2" == "--dry-run" || "$3" == "--dry-run" || "$4" == "--dry-run" ]]
then dryrun="true"
else dryrun="false"
fi

if [[ "$2" == "--rm" || "$3" == "--rm" || "$4" == "--rm" ]]
then remove="true"
else remove="false"
fi

index=$media/index.sqlite
if [[ ! -f "$index" ]]
then sqlite3 "$index" "create table media(hash varchar(64) primary key, path text);"
fi

target_hash=$(sha256sum "$target" | cut -d " " -f 1)

####################
## helper functions

function getCreateDate {
  exiftool -CreateDate "$1" 2> /dev/null \
    | sed 's/.*  ://' \
    | sed 's/: /:0/g' \
    | sed 's/://g' \
    | sed 's/\+.*//g' \
    | sed 's/ /-/g' \
    | sed 's/-$//' \
    | sed 's/^-//'
}

function setCreateDate {
  t="$1"
  d="$2"
  date="${d::4}:${d:4:2}:${d:6:2} ${d:9:2}:${d:11:2}:${d:13:2}"
  if ! exiftool -ignoreMinorErrors -CreateDate="$date" "$t" > /dev/null
  then
    echo "Attmpting to repair broken exif data..."
    # Rewrite all valid exif metadata if some was corrupted (see https://exiftool.org/faq.html#Q20)
    if ! exiftool -all= -tagsfromfile @ -all:all -unsafe -icc_profile -CreateDate="$date" "$t" > /dev/null
    then echo "$fail Failed to set $t CreateDate to $d" && exit 1
    fi
  fi
  created=$(getCreateDate "$t")
  original="${t}_original"
  if [[ "$original" != "$tmp/$(basename "${t}_original")" ]]
  then mv -f "$original" "$tmp/$(basename "${t}_original")"
  fi
  echo "Updated exif data for $t w new create date: ${created}"
}

function getEntry {
  set +e
  if ! sqlite3 "$index" "select path from media where hash = '$target_hash';"
  then echo "$fail Failed to get index entry for $target (hash=$target_hash)" && exit 1
  fi
  set -e
}

function setEntry {
  set +e
  if ! sqlite3 "$index" "insert into media values('$target_hash','$1');"
  then
    if ! sqlite3 "$index" "update media set path = '$1' where hash = '$target_hash';"
    then echo "$fail Failed to set new index entry for $target (path=$1)" && exit 1
    else echo "Updated entry for $target_hash to $1"
    fi
  fi
  set -e
}

####################
## Ensure target is valid & not a duplicate

entry=$(getEntry "$target_hash")
if [[ -n "$entry" && -f "$media/$entry" ]]
then
  echo "$good File $target has already been imported & is available at $entry"
  if [[ "$dryrun" == "false" && "$remove" == "true" ]]
  then
    dup_suffix=$(sha256sum "$media/$entry" | cut -d " " -f 1 | head -c 8)
    if [[ "$entry" =~ .*-$dup_suffix\..* ]]
    then rm -f "$target" && echo "$warn Removed $target"
    else echo "$fail Invalid file exists at $entry (expected suffix of $dup_suffix)" && exit 1
    fi
  fi
  exit 0

elif [[ "$entry" == "null" ]]
then
  echo "$good File w hash $target_hash has already been imported & deleted"
  if [[ "$dryrun" == "false" && "$remove" == "true" ]]
  then rm -f "$target" && echo "$warn Removed $target"
  fi

fi

dotype=${target##*.}
ext=$(exiftool -FileTypeExtension "$target" 2> /dev/null | sed 's/^.*: //')

if [[ \
  "$ext" == "3gp" ||\
  "$ext" == "avi" ||\
  "$ext" == "gif" ||\
  "$ext" == "heic" ||\
  "$ext" == "jpg" ||\
  "$ext" == "m4v" ||\
  "$ext" == "mov" ||\
  "$ext" == "mp4" ||\
  "$ext" == "wmv" \
  ]]
then
  category=${given_category:-camera};
elif [[ \
  "$ext" == "png" \
  ]]
then
  category=${given_category:-screenshots};
elif [[ \
  "$ext" == "aax" ||\
  "$ext" == "m4a" ||\
  "$ext" == "mp3" \
  ]]
then
  category=${given_category:-audio};
elif [[ \
  "$ext" == "csv" ||\
  "$ext" == "doc" ||\
  "$ext" == "docx" ||\
  "$ext" == "html" ||\
  "$ext" == "json" ||\
  "$ext" == "odt" ||\
  "$ext" == "pdf" \
  ]]
then
  category=${given_category:-docs};
else
  echo "$fail Skipping file with unsupported FileTypeExtension $ext: $target" && exit 1
fi

if ! exiftool "$target" > /dev/null
then echo "Invalid exif data for $target" && exit 1
fi

########################################
## Conversions: heic=>jpg, avi,m4v,mov=>mp4

tmp_target="$tmp/$(basename "$target")"
rm -rf "$tmp_target*"
cp "$target" "$tmp_target"
chmod 644 "$tmp_target"

# Convert heic files into jpg
if [[ "$ext" == "heic" ]]
then
  if [[ -z "$(command -v heif-convert)" ]]
  then echo "$fail Install heif-convert first" && exit 1
  fi
  new_target="$tmp/$(basename "$target" | sed 's/\.'"$dotype"'/\.jpg/')"
  if [[ -f "$new_target" ]]
  then rm -f "$new_target"
  fi
  echo "Converting heic-formatted $target into an jpg at $new_target"
  heif-convert -q95 "$target" "$new_target" > /dev/null
  tmp_target="$new_target"
  ext="jpg"
fi

# Convert video files into mp4
# Do we need to rm data streams? https://github.com/aminyazdanpanah/PHP-FFmpeg-video-streaming/issues/74
if [[ "$ext" == "3gp" || "$ext" == "avi" || "$ext" == "m4v" || "$ext" == "mov" || "$ext" == "wmv" ]]
then
  new_target="$tmp/$(basename "$target" | sed 's/\.'"$dotype"'/\.mp4/')"
  if [[ -f "$new_target" ]]
  then rm -f "$new_target"
  fi
  echo "Converting $ext-formatted $target into an mp4 at $new_target"
  ffmpeg -i "$target" -loglevel error -crf 18 -f mp4 "$new_target"
  tmp_target="$new_target"
  ext="mp4"
fi

# Convert audio files into mp3
if [[ "$ext" == "m4a" || "$ext" == "aax" ]]
then
  new_target="$tmp/$(basename "$target" | sed 's/\.'"$dotype"'/\.mp3/')"
  if [[ -f "$new_target" ]]
  then rm -f "$new_target"
  fi
  echo "Converting $ext-formatted $target into an mp3 at $new_target"
  ffmpeg -i "$target" -loglevel error -f mp3 "$new_target"
  tmp_target="$new_target"
  ext="mp3"
fi

# Convert doc files into pdf
if [[ "$ext" == "doc" || "$ext" == "docx" || "$ext" == "html" || "$ext" == "odt" ]]
then
  new_target="$tmp/$(basename "$target" | sed 's/\.'"$dotype"'/\.pdf/')"
  if [[ -f "$new_target" ]]
  then rm -f "$new_target"
  fi
  echo "Converting $ext-formatted $target into an pdf at $new_target"
  doc2pdf -o "$new_target" "$target"
  tmp_target="$new_target"
  ext="pdf"
fi

####################
## set create date

if grep -w -q "$ext" <<<"${datename_types[*]}"
then
  created=$(getCreateDate "$target")
  if [[ -z "$created" || "$created" == "00000000-000000" ]]
  then

    if [[ "$target" =~ (IMG|DOC|VID)-[[:digit:]]{8}-WA[[:digit:]]{4,}.* ]]
    then
      setCreateDate "$tmp_target" "$(echo "$target" | cut -d "-" -f 2)-000000"
      created=$(getCreateDate "$tmp_target")

    # eg 2019-10-26 10.36.10.jpg
    elif [[ "$target" =~ [[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}\ [[:digit:]]{2}\.[[:digit:]]{2}\.[[:digit:]]{2}.* ]]
    then
      setCreateDate "$tmp_target" "$(basename "$target" | sed 's/-//g' | sed 's/ /-/g' | sed 's/\.//' | sed 's/\.//' | sed 's/\..*//')"
      created=$(getCreateDate "$tmp_target")

    # eg SmartSelect_20200613-210904_Prime Video.jpg
    elif [[ "$target" =~ _[[:digit:]]{8}-[[:digit:]]{6}_*.* ]]
    then
      setCreateDate "$tmp_target" "$(basename "$target" | cut -d "_" -f 2)"
      created=$(getCreateDate "$tmp_target")

    # eg Screenshot from 2020-08-26 14-03-02.png
    elif [[ "$target" =~ \ [[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}\ [[:digit:]]{2}-[[:digit:]]{2}-[[:digit:]]{2}.* ]]
    then
      setCreateDate "$tmp_target" "$(basename "$target" | cut -d " " -f 3-4 | sed 's/\..*//' | sed 's/-//g' | sed 's/ /-/')"
      created=$(getCreateDate "$tmp_target")

    # eg Screenshot 2020-10-21 at 1.23.20 AM.png
    elif [[ "$target" =~ \ [[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}\ at\ [[:digit:]]{1,2}\.[[:digit:]]{1,2}\.[[:digit:]]{1,2}\ AM.* ]]
    then
      date="$(basename "$target" | cut -d " " -f 2)"
      time="$(basename "$target" | cut -d " " -f 4)"
      hour="$(bc <<<"n=$(echo "$time" | cut -d "." -f 1); if (n<10) print 0; n" )"
      min="$(bc <<<"n=$(echo "$time" | cut -d "." -f 2); if (n<10) print 0; n" )"
      sec="$(bc <<<"n=$(echo "$time" | cut -d "." -f 3); if (n<10) print 0; n" )"
      setCreateDate "$tmp_target" "$date-$hour$min$sec"
      created=$(getCreateDate "$tmp_target")

    # eg Screenshot 2020-10-21 at 1.23.20 PM.png
    elif [[ "$target" =~ \ [[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}\ at\ [[:digit:]]{1,2}\.[[:digit:]]{1,2}\.[[:digit:]]{1,2}\ PM.* ]]
    then
      date="$(basename "$target" | cut -d " " -f 2)"
      time="$(basename "$target" | cut -d " " -f 4)"
      hour="$(bc <<<"n=$(echo "$time" | cut -d "." -f 1); n+12" )"
      min="$(bc <<<"n=$(echo "$time" | cut -d "." -f 2); if (n<10) print 0; n" )"
      sec="$(bc <<<"n=$(echo "$time" | cut -d "." -f 3); if (n<10) print 0; n" )"
      setCreateDate "$tmp_target" "$date-$hour$min$sec"
      created=$(getCreateDate "$tmp_target")

    else
      setCreateDate "$tmp_target" "00000000-000000"
      created="00000000-000000" # TODO: check to see if the filename includes a date?
    fi
  fi
fi

########################################
## Import

new_hash=$(sha256sum "$tmp_target" | cut -d " " -f 1)
suffix=$(echo "$new_hash" | head -c 8)

if grep -w -q "$ext" <<<"${datename_types[*]}"
then
  name="$created-$suffix.$ext"
  subpath="$category/$name"
  path="$media/$subpath"
else
  name="$(basename "$tmp_target" "$ext" | tr -d "'" | tr ' _–,.()&' '-' | sed 's/-\+/-/g' | sed 's/-$//')-$suffix.$ext"
  subpath="$category/$name"
  path="$media/$subpath"
fi

if [[ ! -d "$(dirname "$path")" ]]
then mkdir -p "$(dirname "$path")"
fi

# If this file already exists, check to make sure it's valid & maybe delete the input file
if [[ -f "$path" ]]
then
  dup_digest=$(sha256sum "$path" | cut -d " " -f 1)
  dup_suffix=$(echo "$dup_digest" | head -c 8)
  if [[ "$path" =~ .*-$dup_suffix\..* ]]
  then echo "$good Valid file already exists at $subpath"
  else echo "$fail Invalid file exists at $path (expected suffix of $dup_suffix)" && exit 1
  fi
  if [[ "$dryrun" == "false" ]]
  then
    setEntry "$subpath"
    echo "$warn Added index entry for $target_hash: $subpath"
    if [[ "$remove" == "true" ]]
    then rm -f "$target" && echo "$warn Removed $target"
    fi
  fi
  rm "$tmp_target"
  exit
fi

# Copy target into media & add it to the index
if [[ "$dryrun" == "true" ]]
then echo "$good Import $target to $subpath"
elif [[ "$dryrun" == "false" ]]
then
  cp -i "$tmp_target" "$path"
  setEntry "$subpath"
  echo "$good Imported $target to $subpath"
  if [[ "$remove" == "true" ]]
  then
    dup_suffix=$(sha256sum "$path" | cut -d " " -f 1 | head -c 8)
    if [[ "$path" =~ .*-$dup_suffix\..* ]]
    then rm -f "$target" && echo "$warn Removed $target"
    else echo "$fail Invalid file exists at $path (expected suffix of $dup_suffix)" && exit 1
    fi
  fi
  rm "$tmp_target"*
fi
