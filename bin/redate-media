#!/bin/bash
set -e

########################################
## Define Constants

root=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." >/dev/null 2>&1 && pwd)

good="✅"
warn="⚠️ "
fail="❌"

datename_categories=(camera screenshots private)

date_zero="00000000-000000"

########################################
## Make sure required bins & files & dirs exist

if [[ -z "$(command -v exiftool)" ]]
then echo "$fail Install exiftool first" && exit 1
fi

if [[ -z "$(command -v sqlite3)" ]]
then echo "$fail Install sqlite3 first" && exit 1
fi

media=${MEDIA_DIR:-$HOME/Media}
mkdir -p "$media"

tmp="/tmp/media"
mkdir -p "$tmp"

########################################
## Parse Args

path="$1"
fullpath="$media/$path"
if [[ ! -f "$fullpath" ]]
then echo "$fail File does not exist at $fullpath" && exit 1
fi
category="${path%/*}"
if ! grep -w -q "$category" <<<"${datename_categories[*]}"
then echo "$warn Date doesn't matter for file at $fullpath" && exit
fi

new_date="$2"
if [[ -z "$new_date" || "$new_date" == -* ]]
then new_date=""
elif ! [[ "$new_date" =~ ^[0-9]{8}-[0-9]{6}$ ]]
then echo "$fail Invalid date, expected YYMMDD-hhmmss but got $new_date" && exit 1
fi

if [[ "$2" == "--dry-run" || "$3" == "--dry-run" ]]
then dryrun="true"
else dryrun="false"
fi

########################################
## Helper Functions

function getCreateDate {
  function fmtDate {
    sed 's/.*  ://' \
      | sed 's/: /:0/g' \
      | sed 's/://g' \
      | sed 's/\+.*//g' \
      | sed 's/ /-/g' \
      | sed 's/-$//' \
      | sed 's/^-//'
  }
  created=$(exiftool -CreateDate -- "$1" | fmtDate)
  if [[ -n "$created" && "$created" != "$date_zero" ]]
  then echo "$created"
  else
    created=$(exiftool -DateTimeCreated -- "$1" | fmtDate)
    if [[ -n "$created" && "$created" != "$date_zero" ]]
    then echo "$created"
    else
      created=$(exiftool -DateCreated -- "$1" | fmtDate)
      if [[ -n "$created" && "$created" != "$date_zero" ]]
      then echo "$created"
      else echo "$date_zero"
      fi
    fi
  fi
}

function setCreateDate {
  t="$1"
  d="$2"
  date="${d::4}:${d:4:2}:${d:6:2} ${d:9:2}:${d:11:2}:${d:13:2}"
  #echo "Setting create date for file '$t' to '$date'"
  if ! exiftool -ignoreMinorErrors -CreateDate="$date" -- "$t" > /dev/null
  then
    echo "Attmpting to repair broken exif data..."
    # Rewrite all valid exif metadata if some was corrupted (see https://exiftool.org/faq.html#Q20)
    if ! exiftool -all= -tagsfromfile @ -all:all -unsafe -icc_profile -CreateDate="$date" -- "$t" > /dev/null
    then echo "$fail Failed to set $t CreateDate to $d" && exit 1
    fi
  fi
  created=$(getCreateDate "$t")
  original="${t}_original"
  if [[ "$original" != "$tmp/$(basename "${t}_original")" ]]
  then mv -f "$original" "$tmp/$(basename "${t}_original")"
  fi
  echo "Updated exif data for $t w new create date: ${created}"
}

function validateMedia {
  new_fullpath="$1"
  # Validate new file before removing old one
  checksum=$(sha256sum -- "$new_fullpath" | cut -d " " -f 1)
  noext=${new_fullpath%.*}
  suffix=${noext##*-}
  if [[ "$checksum" != "$suffix"* ]]
  then echo "$warn Invalid checksum for $new_path (sha256=$checksum)" && exit 1
  fi
  created=$(getCreateDate "$new_fullpath")
  if [[ "${new_path##*/}" != "$created"* ]]
  then echo "$warn Invalid create date for $new_path (CreateDate=$created)" && exit 1
  fi
}

########################################
## Set Default Date

exif_date=$(getCreateDate "$fullpath")
name_date="$(echo "${path##*/}" | cut -d '-' -f 1-2)"
echo "exif_date=$exif_date | name_date=$name_date"

if [[ -z "$new_date" ]]
then
  if [[ "$name_date" == "$date_zero" && "$exif_date" != "$date_zero" ]]
  then
    new_date="$exif_date"
    echo "Setting new date to value from exifdata: $exif_date"
  elif [[ "$name_date" != "$date_zero" && "$exif_date" == "$date_zero" ]]
  then
    new_date="$name_date"
    echo "Setting new date to value from filename: $name_date"
  else
    echo "$fail No date provided nor is a date available in exif data" && exit
  fi
fi

if [[ "$name_date" == "$new_date" && "$exif_date" == "$new_date" ]]
then echo "$warn Date of $path is already set to $new_date" && exit
fi

if ! [[ "$new_date" =~ ^[0-9]{8}-[0-9]{6}$ ]]
then echo "$fail Invalid date, expected YYMMDD-hhmmss but got $new_date" && exit 1
fi

########################################
## Change Create Date

filename="${path##*/}"
ext="${filename##*.}"

tmp_path="$tmp/$(basename "$path")"
rm -rf "$tmp_path*"
cp "$fullpath" "$tmp_path"
chmod 644 "$tmp_path"
setCreateDate "$tmp_path" "$new_date"
new_suffix=$(sha256sum "$tmp_path" | cut -d " " -f 1 | head -c 8)

new_path="$category/$new_date-$new_suffix.$ext"
new_fullpath="$media/$new_path"

if [[ -f "$new_fullpath" ]]
then
  echo "$warn File already exists at new path $new_path"
  validateMedia "$new_fullpath"
  echo "File at $new_path is valid, deleting the old one"
  bash "$root/bin/remove-media" "$path"
  exit
elif [[ "$new_fullpath" == "$fullpath" ]]
then echo "$warn New path $new_path is equal to the old path" && exit 1
fi

########################################
## Update Index

index="$media/index.sqlite"
if [[ ! -f "$index" ]]
then sqlite3 "$index" "create table media(hash varchar(64) primary key, path text);"
fi

update_query="update media set path = '$new_path' where path = '$path';"
if [[ "$dryrun" == "true" ]]
then echo "Execute SQLite query: $update_query"
else
  echo "Executing SQLite query: $update_query"
  if ! sqlite3 "$index" "$update_query"
  then echo "$fail Failed to update index entry for $path" && exit 1
  fi
fi

########################################
## Move File

if [[ "$dryrun" == "true" ]]
then
  echo "Move $tmp_path to $new_path"
  rm "$tmp_path"
else
  if [[ ! -d "$(dirname "$new_fullpath")" ]]
  then mkdir -p "$(dirname "$new_fullpath")"
  fi
  mv "$tmp_path" "$new_fullpath"
  echo "Moved $tmp_path to $new_path"

  validateMedia "$new_fullpath"

  rm "$fullpath"
  echo "$good Successfully reset date of ${path#*/} yielding $new_path";
fi

